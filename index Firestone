<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Firebase)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Sarabun', sans-serif;
        }
        .toast {
            transform: translateX(120%);
            transition: transform 0.3s ease-in-out;
            visibility: hidden;
        }
        .toast.show {
            transform: translateX(0);
            visibility: visible;
        }
        .modal {
            backdrop-filter: blur(4px);
        }
        .category-item:hover {
            transform: translateY(-2px);
            transition: transform 0.2s ease;
        }
        .text-item {
            transition: all 0.3s ease;
        }
        .text-item:hover {
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        .loader {
            border-top-color: #3498db;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-lg border-b-4 border-indigo-500">
        <div class="container mx-auto px-6 py-4">
            <h1 class="text-3xl font-bold text-gray-800 text-center">üìù ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h1>
        </div>
    </header>

    <div class="container mx-auto px-6 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Categories Section -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">üìÅ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h2>
                    <!-- Add Category Form -->
                    <div class="mb-6">
                        <div class="flex gap-2">
                            <input type="text" id="categoryInput" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà..." class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none">
                            <button id="addCategoryBtn" onclick="addCategory()" class="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium transition-colors">‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
                        </div>
                    </div>
                    <!-- Categories List -->
                    <div id="categoriesList" class="space-y-2">
                        <!-- Loading spinner for categories -->
                        <div id="categoryLoader" class="flex justify-center py-4"><div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12"></div></div>
                    </div>
                </div>
            </div>

            <!-- Text Management Section -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl shadow-lg p-6 min-h-[300px]">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-semibold text-gray-800 flex items-center">üìÑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° <span id="selectedCategoryName" class="ml-2 text-indigo-600 font-normal"></span></h2>
                    </div>
                    <!-- Add Text Form -->
                    <div id="addTextSection" class="mb-6 hidden">
                        <div class="space-y-3">
                            <textarea id="textContentInput" placeholder="‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°... (Ctrl+Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°)" rows="4" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none resize-none"></textarea>
                            <button id="addTextBtn" onclick="addText()" class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg font-medium transition-colors">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</button>
                        </div>
                    </div>
                    <!-- No Category Selected Message -->
                    <div id="noCategoryMessage" class="text-center py-12">
                        <div class="text-6xl mb-4">üìÇ</div>
                        <p class="text-gray-500 text-lg">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</p>
                    </div>
                    <!-- Text List -->
                    <div id="textsList" class="space-y-4 hidden">
                         <!-- Loading spinner for texts -->
                        <div id="textLoader" class="flex justify-center py-8"><div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12"></div></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 modal hidden items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 w-full max-w-md mx-4">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h3>
            <div class="space-y-3">
                <textarea id="editContentInput" rows="4" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none resize-none"></textarea>
                <div class="flex gap-3 justify-end">
                    <button onclick="closeEditModal()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg font-medium transition-colors">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    <button onclick="saveEdit()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg font-medium transition-colors">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg toast z-50">
        <span id="toastMessage"></span>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, 
            onSnapshot, collection, query, writeBatch, getDocs
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        // This configuration is provided by the environment.
        const firebaseConfig = typeof __firebase_config !== 'undefined' 
            ? JSON.parse(__firebase_config) 
            : { apiKey: "YOUR_API_KEY", authDomain: "YOUR_AUTH_DOMAIN", projectId: "YOUR_PROJECT_ID" }; // Fallback for local testing

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'text-manager-app';

        // --- Initialize Firebase ---
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // --- Global State ---
        let userId = null;
        let selectedCategory = null; // { id: '...', name: '...' }
        let editingTextId = null;
        let unsubscribeCategories = () => {};
        let unsubscribeTexts = () => {};

        // --- App Initialization ---
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            authenticateUser();
        });

        // --- Authentication ---
        function authenticateUser() {
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    console.log("User is signed in with UID:", user.uid);
                    userId = user.uid;
                    listenForCategories();
                } else {
                    console.log("User is not signed in. Attempting to sign in.");
                    try {
                        if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Error during sign-in:", error);
                        showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
                    }
                }
            });
        }
        
        // --- Firestore Real-time Listeners ---
        function listenForCategories() {
            if (!userId) return;
            const categoriesCol = collection(db, 'artifacts', appId, 'users', userId, 'categories');
            unsubscribeCategories(); // Unsubscribe from previous listener
            unsubscribeCategories = onSnapshot(categoriesCol, (snapshot) => {
                const categories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderCategories(categories);
            }, (error) => {
                console.error("Error listening for categories:", error);
                showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ', 'error');
            });
        }

        function listenForTexts() {
            if (!userId || !selectedCategory) return;
            unsubscribeTexts(); // Unsubscribe from previous listener
            document.getElementById('textLoader').style.display = 'flex';
            document.getElementById('textsList').innerHTML = '';

            const textsCol = collection(db, 'artifacts', appId, 'users', userId, 'categories', selectedCategory.id, 'texts');
            unsubscribeTexts = onSnapshot(textsCol, (snapshot) => {
                const texts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                // Simple sort by timestamp (newest first)
                texts.sort((a, b) => (b.createdAt?.seconds || 0) - (a.createdAt?.seconds || 0));
                renderTexts(texts);
            }, (error) => {
                console.error("Error listening for texts:", error);
                showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ', 'error');
                document.getElementById('textLoader').style.display = 'none';
            });
        }

        // --- Category Management ---
        window.addCategory = async function() {
            const input = document.getElementById('categoryInput');
            const categoryName = input.value.trim();
            if (categoryName === '') {
                showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'error');
                return;
            }
            
            const btn = document.getElementById('addCategoryBtn');
            btn.disabled = true;
            btn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...';

            try {
                const categoriesCol = collection(db, 'artifacts', appId, 'users', userId, 'categories');
                await addDoc(categoriesCol, {
                    name: categoryName,
                    textCount: 0,
                    createdAt: new Date()
                });
                input.value = '';
                showToast('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            } catch (error) {
                console.error("Error adding category: ", error);
                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'error');
            } finally {
                btn.disabled = false;
                btn.textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°';
            }
        }

        window.selectCategory = function(categoryId, categoryName) {
            selectedCategory = { id: categoryId, name: categoryName };
            
            document.getElementById('selectedCategoryName').textContent = `(${categoryName})`;
            document.getElementById('noCategoryMessage').classList.add('hidden');
            document.getElementById('addTextSection').classList.remove('hidden');
            document.getElementById('textsList').classList.remove('hidden');
            
            // Re-render categories to highlight the active one
            document.querySelectorAll('.category-item').forEach(el => {
                if (el.dataset.id === categoryId) {
                    el.classList.add('bg-indigo-50', 'border-indigo-300');
                    el.querySelector('button').classList.add('text-indigo-600');
                } else {
                    el.classList.remove('bg-indigo-50', 'border-indigo-300');
                    el.querySelector('button').classList.remove('text-indigo-600');
                }
            });
            
            listenForTexts();
        }

        window.deleteCategory = async function(event, categoryId, categoryName) {
            event.stopPropagation(); // Prevent selectCategory from firing
            if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${categoryName}" ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;

            try {
                // Delete all texts in the subcollection first
                const textsColRef = collection(db, 'artifacts', appId, 'users', userId, 'categories', categoryId, 'texts');
                const textsSnapshot = await getDocs(textsColRef);
                const batch = writeBatch(db);
                textsSnapshot.forEach(doc => {
                    batch.delete(doc.ref);
                });
                await batch.commit();

                // Then delete the category document
                const categoryDocRef = doc(db, 'artifacts', appId, 'users', userId, 'categories', categoryId);
                await deleteDoc(categoryDocRef);

                if (selectedCategory && selectedCategory.id === categoryId) {
                    selectedCategory = null;
                    document.getElementById('selectedCategoryName').textContent = '';
                    document.getElementById('noCategoryMessage').classList.remove('hidden');
                    document.getElementById('addTextSection').classList.add('hidden');
                    document.getElementById('textsList').classList.add('hidden');
                    unsubscribeTexts();
                }
                showToast('‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            } catch (error) {
                console.error("Error deleting category:", error);
                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', 'error');
            }
        }

        // --- Text Management ---
        window.addText = async function() {
            if (!selectedCategory) return;
            const content = document.getElementById('textContentInput').value.trim();
            if (content === '') {
                showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', 'error');
                return;
            }
            
            const btn = document.getElementById('addTextBtn');
            btn.disabled = true;
            btn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°...';

            try {
                const textsCol = collection(db, 'artifacts', appId, 'users', userId, 'categories', selectedCategory.id, 'texts');
                await addDoc(textsCol, {
                    content: content,
                    createdAt: new Date()
                });
                document.getElementById('textContentInput').value = '';
                showToast('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            } catch (error) {
                console.error("Error adding text: ", error);
                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', 'error');
            } finally {
                btn.disabled = false;
                btn.textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°';
            }
        }
        
        window.copyText = function(content) {
            // A more robust way to copy to clipboard that works in secure contexts
            const textArea = document.createElement("textarea");
            textArea.value = content;
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                document.execCommand('copy');
                showToast('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            } catch (err) {
                showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ', 'error');
            }
            document.body.removeChild(textArea);
        }

        window.editText = function(textId, currentContent) {
            editingTextId = textId;
            document.getElementById('editContentInput').value = currentContent;
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        window.closeEditModal = function() {
            document.getElementById('editModal').classList.add('hidden');
            document.getElementById('editModal').classList.remove('flex');
            editingTextId = null;
        }

        window.saveEdit = async function() {
            if (!editingTextId || !selectedCategory) return;
            const content = document.getElementById('editContentInput').value.trim();
            if (content === '') {
                showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', 'error');
                return;
            }
            
            try {
                const textDocRef = doc(db, 'artifacts', appId, 'users', userId, 'categories', selectedCategory.id, 'texts', editingTextId);
                await updateDoc(textDocRef, { content: content });
                closeEditModal();
                showToast('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            } catch (error) {
                console.error("Error saving edit:", error);
                showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', 'error');
            }
        }

        window.deleteText = async function(textId) {
            if (!selectedCategory) return;
            if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                try {
                    const textDocRef = doc(db, 'artifacts', appId, 'users', userId, 'categories', selectedCategory.id, 'texts', textId);
                    await deleteDoc(textDocRef);
                    showToast('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
                } catch (error) {
                    console.error("Error deleting text:", error);
                    showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
                }
            }
        }

        // --- Render Functions ---
        function renderCategories(categories) {
            const container = document.getElementById('categoriesList');
            document.getElementById('categoryLoader').style.display = 'none';
            if (!categories || categories.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</p>';
                return;
            }
            container.innerHTML = categories.map(category => `
                <div data-id="${category.id}" class="category-item flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer ${selectedCategory && selectedCategory.id === category.id ? 'bg-indigo-50 border-indigo-300' : ''}" onclick="selectCategory('${category.id}', '${escapeHTML(category.name)}')">
                    <button class="flex-1 text-left font-medium pointer-events-none ${selectedCategory && selectedCategory.id === category.id ? 'text-indigo-600' : 'text-gray-700'}">
                        ${escapeHTML(category.name)}
                    </button>
                    <button onclick="event.stopPropagation(); deleteCategory(event, '${category.id}', '${escapeHTML(category.name)}')" class="text-red-500 hover:text-red-700 ml-2 p-1" title="‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà">üóëÔ∏è</button>
                </div>
            `).join('');
        }

        function renderTexts(texts) {
            const container = document.getElementById('textsList');
            document.getElementById('textLoader').style.display = 'none';
            if (!texts || texts.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-8">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ</p>';
                return;
            }
            container.innerHTML = texts.map(textItem => `
                <div class="text-item bg-gray-50 border border-gray-200 rounded-lg p-4">
                    <div class="flex justify-between items-start mb-2">
                        <div class="flex-1">
                            <p class="text-gray-700 whitespace-pre-wrap">${escapeHTML(textItem.content)}</p>
                        </div>
                        <div class="flex gap-2 ml-4">
                            <button onclick="copyText(\`${escapeForTemplateLiteral(textItem.content)}\`)" class="text-blue-500 hover:text-blue-700 p-1" title="‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å">üìã</button>
                            <button onclick="editText('${textItem.id}', \`${escapeForTemplateLiteral(textItem.content)}\`)" class="text-green-500 hover:text-green-700 p-1" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">‚úèÔ∏è</button>
                            <button onclick="deleteText('${textItem.id}')" class="text-red-500 hover:text-red-700 p-1" title="‡∏•‡∏ö">üóëÔ∏è</button>
                        </div>
                    </div>
                    <p class="text-xs text-gray-400 mt-2">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${textItem.createdAt ? new Date(textItem.createdAt.seconds * 1000).toLocaleString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                </div>
            `).join('');
        }

        // --- Utility Functions ---
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            toastMessage.textContent = message;
            
            toast.className = `fixed top-4 right-4 text-white px-6 py-3 rounded-lg shadow-lg toast z-50 ${type === 'error' ? 'bg-red-500' : 'bg-green-500'}`;
            
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        function setupEventListeners() {
            document.getElementById('categoryInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') addCategory();
            });
            document.getElementById('textContentInput').addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && e.ctrlKey) {
                    addText();
                }
            });
            document.getElementById('editModal').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) closeEditModal();
            });
        }
        
        function escapeHTML(str) {
            return str.replace(/[&<>"']/g, function(match) {
                return {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                }[match];
            });
        }

        function escapeForTemplateLiteral(str) {
            return str.replace(/`/g, '\\`').replace(/\${/g, '\\${');
        }

    </script>
</body>
</html>
